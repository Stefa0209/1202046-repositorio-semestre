var camera, scene, renderer;
var plane;
var mouse, raycaster, isShiftDown = false;

var rollOverMesh, rollOverMaterial;
var cubeGeo, cubeMaterial;

var objects = [];
var indexTipoObjeto = 0; 

var nombreObjeto= "Figura"; 
function devolverObjeto(){

    var cantidadObjetos=3; 
   var objetoM = null; 
   nombreObjeto= "cubo"; 
   if(indexTipoObjeto%cantidadObjetos==0){

    objeto =new THREE.Mesh(cubeGeo, cubeMaterial);
    console.log("cubo"); 
   }
   if(indexTipoObjeto%cantidadObjetos==1){
    var geometry = new THREE.SphereGeometry(1.5, 10, 32);
    var material = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe:true });
    var sphere = new THREE.Mesh(geometry, material);
    //scene.add(sphere);

    var geometry = new THREE.BoxGeometry(2.7, 1.5, 2.7);
    var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    var cube = new THREE.Mesh(geometry, material);
    cube.position.y = -0.8;
    //scene.add(cube);

    var spCSG = THREE.CSG.fromMesh(sphere);
    var boxCSG = THREE.CSG.fromMesh(cube);

    var resultado = spCSG.subtract(boxCSG);
    objeto = THREE.CSG.toMesh(resultado);
    objeto.material = new THREE.MeshStandardMaterial({ color: 0x00cc11 });
console.log("Semiesfera");

objeto.scale.set(30,30,30);

   }

   if(indexTipoObjeto %cantidadObjetos==2){

    var curve2D = [];
    curve2D[0] = new THREE.Vector2(0, 4);
    curve2D[1] = new THREE.Vector2(2, 3.5);
    curve2D[2] = new THREE.Vector2(3.5, 4.5);
    curve2D[3] = new THREE.Vector2(5.5, 5);
    curve2D[4] = new THREE.Vector2(9, 3);
    curve2D[5] = new THREE.Vector2(9, 2);
    curve2D[6] = new THREE.Vector2(6, 0.5);
    curve2D[7] = new THREE.Vector2(0, 2);


    var shape = new THREE.Shape();
    shape.moveTo(0, 0);
    shape.splineThru(curve2D);

    var material = new THREE.LineBasicMaterial({ color: 0xff0000 });
    var resolution = 50;
    var points = shape.getPoints(resolution);

    var geometry = new THREE.BufferGeometry().setFromPoints(points);
    // Create the final object to add to the scene
    var curveLine = new THREE.Line(geometry, material);

    //EXTRUDE
    var extrudeSettings = {
        steps: 2,
        amount: 3,
        bevelEnabled: false,
    };

    var geometryExt = new THREE.ExtrudeGeometry(shape, extrudeSettings);
    var materialExt = new THREE.MeshStandardMaterial({
        color: 0x00ff00,
        metalness: 0.5,
        roughness: 0.1,
        opacity: 0.75,
        transparent: true
    });



    var meshGeneratedFromCurveLine = new THREE.Mesh(geometryExt, materialExt);
    objeto = meshGeneratedFromCurveLine;
    console.log("extrude");
    objeto.scale.set(30,30,30);

   }

    return objeto; 
}

init();
iluminar();
animate();
render();


function init() {

    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.set(500, 800, 1300);
    camera.lookAt(0, 0, 0);
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf0f0f0);
    
    
    // roll-over helpers

    var rollOverGeo = new THREE.BoxBufferGeometry(50, 50, 50);
    rollOverMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, opacity: 0.5, transparent: true });
    rollOverMesh = new THREE.Mesh(rollOverGeo, rollOverMaterial);
    scene.add(rollOverMesh);

    // cubes

    cubeGeo = new THREE.BoxBufferGeometry(50, 50, 50);
    cubeMaterial = new THREE.MeshLambertMaterial({ color: 0xfeb74c, map: new THREE.TextureLoader().load('textures/square-outline-textured.png') });

    // grid

    var gridHelper = new THREE.GridHelper(1000, 20);
    scene.add(gridHelper);

    //

    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    var geometry = new THREE.PlaneBufferGeometry(1000, 1000);
    geometry.rotateX(- Math.PI / 2);

    plane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ visible: false }));
    scene.add(plane);

    objects.push(plane);

    // lights

    var ambientLight = new THREE.AmbientLight(0x606060);
    scene.add(ambientLight);

    var directionalLight = new THREE.DirectionalLight(0xffffff);
    directionalLight.position.set(1, 0.75, 0.5).normalize();
    scene.add(directionalLight);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    controls = new THREE.OrbitControls( camera, renderer.domElement );
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    //  estructura de lister('nombreaccionNavegaoes', nombreFuncioEjectura, false)
  //  document.addEventListener('mousemove', onDocumentMouseMove, false);
    document.addEventListener('mousemove', onDocumentMouseMove, false);
    document.addEventListener('mousedown', onDocumentMouseDown, false);
    document.addEventListener('keydown', onDocumentKeyDown, false);
    document.addEventListener('keyup', onDocumentKeyUp, false);

    //

    window.addEventListener('resize', onWindowResize, false);

}

function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);

}

function onDocumentMouseMove(event) {

    event.preventDefault();

    mouse.set((event.clientX / window.innerWidth) * 2 - 1, - (event.clientY / window.innerHeight) * 2 + 1);

    raycaster.setFromCamera(mouse, camera);

    var intersects = raycaster.intersectObjects(objects);

    if (intersects.length > 0) {

        var intersect = intersects[0];

        rollOverMesh.position.copy(intersect.point).add(intersect.face.normal);
        rollOverMesh.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25);

    }

    render();

}

function onDocumentMouseDown(event) {
    
 if(run){
    event.preventDefault();

    mouse.set((event.clientX / window.innerWidth) * 2 - 1, - (event.clientY / window.innerHeight) * 2 + 1);

    raycaster.setFromCamera(mouse, camera);

    var intersects = raycaster.intersectObjects(objects);

    if (intersects.length > 0) {

        var intersect = intersects[0];

        // delete cube

        if (isShiftDown) {

            if (intersect.object !== plane) {

                scene.remove(intersect.object);

                objects.splice(objects.indexOf(intersect.object), 1);

            }

            // create cube

        } else {

            var objectoToAdd = devolverObjeto();
            objectoToAdd.position.copy(intersect.point).add(intersect.face.normal);
            objectoToAdd.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25);
            scene.add(objectoToAdd);

            objects.push(objectoToAdd);

            // modificar para cambiar elemento 

        }

        render();

    }
 }else{
     if(confirm("inicia")){
         run=true;  
     } 
 }
}


// arrow left	37
// arrow up	38
// arrow right	39
// arrow down	40
function onDocumentKeyDown(event) {

    switch (event.keyCode) {

        case 16: isShiftDown = true; break;
        case 38: indexTipoObjeto++; break; 
        case 40: indexTipoObjeto--; break; 
        
    }
    console.log(indexTipoObjeto)

}

function onDocumentKeyUp(event) {

    var s = document.getElementById("figura"); 
    s.innerHTML = nombreObjeto + " " + indexTipoObjeto  ; 
    switch (event.keyCode) {

        case 16: isShiftDown = false; break;

    }

}

function render() {

    renderer.render(scene, camera);

}

function iluminar() {
    var ambient = new THREE.AmbientLight(0xffffff, 1);
    scene.add(ambient);

    var pointLight1 = new THREE.PointLight(0xffffff, .2, 100);
    pointLight1.position.set(10, 10, -10);
    scene.add(pointLight1);
}

function animate(){
    requestAnimationFrame( animate );
    controls.update();
    render();
}

var run=false; 
function animateClick(){
    run = true; 
}
function stopClick(){
    run = false; 
}